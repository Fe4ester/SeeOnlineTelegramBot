from aiogram import Router, F
from aiogram.types import CallbackQuery

# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.fsm.context import FSMContext
from src.bot.states.tracked_users_menu_states import DeleteTrackedUserStates

# –õ–æ–≥–∏–∫–∞
from src.services.tracker_service_client import SeeOnlineAPI, SeeOnlineAPIError

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.bot.keyboards.inline import back_keyboard

# –û—Ç–≤–µ—Ç—ã
from src.bot.answers.menu_answers import (
    unavailable_answer,
    no_tracked_users_answer,

)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
from src.config.settings import settings

router = Router()


@router.callback_query(F.data == "delete_tracked_user")
async def delete_tracked_user_callback(callback: CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with SeeOnlineAPI(base_url=settings.EXTERNAL_SERVICE_API_URL) as api:
        try:
            tracked_users = await api.get_tracked_user(telegram_user_id=user_id)
        except SeeOnlineAPIError:
            await callback.answer(
                text=unavailable_answer,
                show_alert=True
            )
            return

    if not tracked_users:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å—Ä–∞–∑—É –≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥–∏–º
        await callback.message.edit_text(
            no_tracked_users_answer,
            reply_markup=back_keyboard()
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    tracked_list_str = "\n".join([
        f"{idx}. @{u.username}" for idx, u in enumerate(tracked_users, start=1)
    ])

    text_for_user = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        f"{tracked_list_str}\n\n"
        "<i>–ù–∞–ø–∏—à–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</i>"
    )


    await state.update_data(tracked_users=tracked_users)

    await callback.message.edit_text(
        text=text_for_user,
        parse_mode="HTML",
        reply_markup=back_keyboard()
    )
    await state.set_state(DeleteTrackedUserStates.waiting_for_user_number)
    await callback.answer()
